1st off, I really need some community support to learn how do the programming to make this a reality. Its basic stuff but I am 30+ years outta touch.
My last venture was making software for the commodore vic-20 using commodare BASIC or their Proprietary assembly language. My role was called "systems analyst"
Yes, this was a thing back in the day when calculators were only for rich kids and were considered cheating if used in school. That was before my lifelong
career as a musician rockstar multidad. 

Object here is to create fanspeed software for a Dell Poweredge r730xd running a debian 12 based linux desktop deployed as a server providing
file shares and virtual machine which I used at home.
Planning, Just to a nice guy and make things xtra difficult, I want to adapt it to run on Windows hosts too for those people.

I have made some notes here.
I will use my Dell Poweredge r730xd which has an Nvidia gtx-1050 installed. I think it represents an average homelab server. It's what I have, whats availble to me, 
and will be dell specific. I hope HP,Supermicro, and later Dell owners will adapt the ipmi RAW commands to suit their system, fork off, and document changes.
To start we need to....
Determine the needed airflow...
  I like to keep internal components under 60 degrees celcius.
Determine vendor helpfull software...
  This program needs both Dell racadm AND the opensource ipmitool < 1.18.18 for the case fans.
  I need to Freeze updates to a point before Dell rewrote their firmware so that it now blocked fan customization via ipmitool.
  To achieve this we need to freeze IPMItool at 1.18.18. and keep Dell iDrac firmware version no greater than 3.34.34.34. Otherwise you will find that Dell has
disabled any customer intervention forcing you to be Dell vendor Locked in.
    FYI: (Open Rack certified) designed form factors are the future of servers, Our beloved big manufacturers gotta keep trying like hell to create an artificially
anti-trust monopoly on everything. From hardware to software and every which way in between (example: using standard connectors with nonstandard wiring to cause a short circuit).
It's truely deceitful to force scare you into using only their product without documenting a wiring hazard. But, thats another discussion best left elsewhere.

So, we need to gather our current cpu temps,
and import those into variables,
define a safe cputemp range, (I'd say upto 55 Degrees celcius)
define our super quiet idling fan speed, (I'd say 0x12)
Decide, should I consider using cpu load to predict temps rising and adjust speeds before temp rises to make this program "smarter"?
Or, Just use real-time data?
Where do I get the current temp data? From log, or from sensors?
How do I get data? using the "Watch" shell command, or grep from log repeatedly? Whats most efficient? I dont wanna tie up an entire cpu thread just for this so the 
"watch" cli seems a poor choice.."for x loop" in basic seems just as ugly..

Even smarter we should Consider hard drive io usage or temps to keep drives and raid cards cooler. Each fan is configurable therfore we can modulate airflow where
its needed. Theres many many senors, and many different commands to pull the different data into text. I just dont know how to place it in a variable instead.

below commanands are a starting point.....
----
command to disable "DELL Vendor Lock-In". This allows owners to use 3rd party addon cards without locking fanspeed to max rpm.
Dell required max cooling to be enforced so that non-certified hardware doesn't blow up your expensive DELL server. You can override this using dell "racadm".
The command to override this behavior is:

$ sudo racadm set system.thermalsettings.ThirdPartyPCIFanResponse 0
----
command to set manual fan speed. Note its position, 2nd from last here. 0x01=manual, 0x00=is to use automatic idrac settings. The command is:

-(UBUNTU) $ sudo /usr/bin/ipmitool raw 0x30 0x30 0x01 0x00
or
-(debian bullseye) $ sudo /usr/local/share/ipmitool raw 0x30 0x30 0x01 0x00
(**just search where ipmitool is located on your system and adjust path accordingly**)
----
command to set fan speed. It can be set in one of 65 steps. Each step is a pwm percentage of the default dell fan models' max speed. written in hexadecimal. Values are from 0x00 to 0x64, Example: 0x00=0% (off) and 0x11=11% of maximum speed. Maximum speed is a wopping 17000 rpm. Note position is 5th value (last). The command is:

-$ sudo /usr/local/share/ipmitool raw 0x30 0x30 0x02 0xFF 0x11
----
optional command. There are only 6 fans controlled within the case. You can choose to set the speed of any one fan or select all. The individual fan number is chosen by its in hex value 1-6, or 0xFF for all 6 fans. This could be helpfull in just adjusting the fans for a single hot cpu, the mini perc raid card (Rt.side), or gpu placement, if needed. why? iDrac just cranks them all up but it is possible to be very selective which is where I see this program eventually getting to. Note the position here is 4th value. The command is:

-$ sudo /usr/local/share/ipmitool raw 0x30 0x30 0x02 0xFF 0x11
----

Questions,
There seems to be 5 raw ipmi values. Can these be combined?
Investigate that 3rd value. Why is it a 0x02 in speed control and not 0x01? also why is 4th value 0x00 and not 0xFF in manual/auto selector command. Back later, hopefully, with the answers.

Oberservations 09-2023
my 730 never seems to go above 9% cpu load. even if using all cpu to encode av1 media. I dont understand why but the temps always stay below 45 degrees.
i think i could use this script to keep fine tuned quiet upto 45 degrees then then temporailly release to the dell loud speeds if above 45 degrees. Go back to quiet mode once temps become low <45 again.



addendum:
I haven't quite figured standardised GPU cooling support yet.
I should detect Nvidia temps, read cards temps. Control Nvidia fan and the righthand set of server fans to push air towards the gpu as needed.
We will Add Intel arc and AMD fan speeds later when I have one to test.
